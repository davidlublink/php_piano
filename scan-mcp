#!/usr/bin/php
<?php

Class PHPPiano
{
     private $chips = [ 0x20, 0x24, 0x26 ];
     private $banks = [ 'A' => 0, 'B' => 1 ];
     private $pins  = [ 0, 1, 2, 3, 4, 5, 6, 7 ];

     private $bus = 1;

     const IODIR  = 0x01 ;
     const IPOL   = 0x02;
     const GPINTEN = 0x04;

     const DEFVAL = 0x06;
     const INTCON = 0x08;
     const IOCON  = 0x0A;

     const GPPU   = 0x0C;
     const INTF   = 0x0E;
     const INTCAP = 0x10;
     const GPIO   = 0x12;
     const OLAT   = 0x14;



     public function __construct( )/*{{{*/
     {
          echo "Set all chips to input\n";
          $this->_forEachChip( [ $this, 'set' ], self::IODIR, 'A' ) ;
          $this->_forEachChip( [ $this, 'set' ], self::IODIR, 'B' ) ;

          echo "setting pullup resistors to on\n";
          $this->_forEachChip( [ $this, 'set' ], self::GPPU, 'A' ) ;
          $this->_forEachChip( [ $this, 'set' ], self::GPPU, 'B' ) ;

          echo "// set default value to 0\n";
          $this->_forEachChip( [ $this, 'set' ], self::DEFVAL, 'A' ); 
          $this->_forEachChip( [ $this, 'set' ], self::DEFVAL, 'B' ); 
     }/*}}}*/
     
     public function getRegister( $bank, $register )/*{{{*/
     {
          return $register + $this->banks[$bank];
     }/*}}}*/
     
     public function set( $chip, $register, $bank, $byte = 0x00)/*{{{*/
     {
          $e = "i2cset -y {$this->bus} 0x".dechex($chip) . " 0x". dechex($register) . ' 0x' . dechex( $byte ) ;

          //echo $e ."\n";

          shell_exec( $e );
     }/*}}}*/

     private function get( $chip, $register )/*{{{*/
     {
          $e = "i2cget -y {$this->bus} 0x". dechex( $chip)." 0x". dechex($register) ;

          // echo $e ."\n";

          $r = trim(shell_exec( $e ));

          return $r; 

     }/*}}}*/

     private function _forEachChip( $cb )/*{{{*/
     {
          $arguments = func_get_args();
          foreach ( $this->chips as $chip )
          {
               // remove previous parameter
               array_shift( $arguments );

               // add new chip
               array_unshift( $arguments, $chip );

               // call callback
               call_user_func_array( $cb, $arguments );
          }
     }/*}}}*/
     
     public function scanInputs()/*{{{*/
     {
          for ( $a = 0; $a < 7 ; $a++ )
          {
               $this->set( 0x20, self::IODIR, 'A', $a );
               $this->set( 0x20, self::GPIO,  'A', $a );

               print_r( $this->readInputs( 0x20, 'A' ) );
               print_r( $this->readInputs( 0x20, 'B' ) );
               echo "\t";

               print_r( $this->readInputs( 0x24, 'A' ) );
               print_r( $this->readInputs( 0x24, 'B' ) );

               echo "\t";
               print_r( $this->readInputs( 0x26, 'A' ) );
               print_r( $this->readInputs( 0x26, 'B' ) );
               echo "\n";
          }
     }/*}}}*/

     public function readInputs( $chip, $bank )/*{{{*/
     {
          $r = $this->get( $chip, $this->getRegister( $bank, self::GPIO ) );
          $rr = str_pad( base_convert( $r, 16, 2 ), 8, '0' );

          return $rr;
          return str_split( $rr );
     }/*}}}*/

     public function setOutput( $chip, $register, $bank, $pin )/*{{{*/
     {

     }/*}}}*/
}

